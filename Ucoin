import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, transactions, timestamp=None, nonce=0):

        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = timestamp or time.time()
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = (str(self.index) + self.previous_hash + 
                        str(self.transactions) + str(self.timestamp) + str(self.nonce))
        return hashlib.sha256(block_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []

    def create_genesis_block(self):
        return Block(0, "0", "Genesis Block", time.time())

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i-1]

            if current.hash != current.calculate_hash():
                print("Current block hash invalid")
                return False
            if current.previous_hash != previous.hash:
                print("Previous block hash invalid")
                return False
        return True

# Example usage:
my_coin = Blockchain()

print("Mining block 1...")
my_coin.add_block(Block(1, "", {"amount": 4}))

print("Mining block 2...")
my_coin.add_block(Block(2, "", {"amount": 10}))

print(f"Is blockchain valid? {my_coin.is_chain_valid()}")
