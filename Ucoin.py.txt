import hashlib
import time
import json
from ecdsa import SigningKey, SECP256k1, VerifyingKey

class Wallet:
    def __init__(self):
        self.private_key = SigningKey.generate(curve=SECP256k1)
        self.public_key = self.private_key.get_verifying_key()

    def sign(self, message):
        return self.private_key.sign(message.encode()).hex()

    def get_address(self):
        # Simplified address: SHA256 of public key
        pubkey_bytes = self.public_key.to_string()
        return hashlib.sha256(pubkey_bytes).hexdigest()

class Transaction:
    def __init__(self, sender_address, recipient_address, amount, signature=None):
        self.sender = sender_address
        self.recipient = recipient_address
        self.amount = amount
        self.signature = signature

    def to_dict(self):
        return {
            'sender': self.sender,
            'recipient': self.recipient,
            'amount': self.amount,
            'signature': self.signature
        }

    def calculate_hash(self):
        tx_str = json.dumps(self.to_dict(), sort_keys=True)
        return hashlib.sha256(tx_str.encode()).hexdigest()

    def sign_transaction(self, private_key):
        if self.sender == "MINING_REWARD":
            return  # Mining rewards don't need signatures
        tx_hash = self.calculate_hash()
        self.signature = private_key.sign(tx_hash.encode()).hex()

    def is_valid(self, public_key):
        if self.sender == "MINING_REWARD":
            return True
        if not self.signature:
            print("No signature in this transaction")
            return False
        tx_hash = self.calculate_hash()
        try:
            return public_key.verify(bytes.fromhex(self.signature), tx_hash.encode())
        except:
            return False

class Block:
    def __init__(self, index, previous_hash, transactions, timestamp=None, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions  # list of Transaction objects
        self.timestamp = timestamp or time.time()
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        tx_hashes = ''.join(tx.calculate_hash() for tx in self.transactions)
        block_string = (str(self.index) + self.previous_hash + tx_hashes +
                        str(self.timestamp) + str(self.nonce))
        return hashlib.sha256(block_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []
        self.mining_reward = 100

    def create_genesis_block(self):
        return Block(0, "0", [], time.time())

    def get_latest_block(self):
        return self.chain[-1]

    def mine_pending_transactions(self, mining_reward_address):
        # Add mining reward transaction
        reward_tx = Transaction("MINING_REWARD", mining_reward_address, self.mining_reward)
        self.pending_transactions.append(reward_tx)

        block = Block(len(self.chain), self.get_latest_block().hash, self.pending_transactions)
        block.mine_block(self.difficulty)
        self.chain.append(block)

        self.pending_transactions = []

    def add_transaction(self, transaction):
        # Validate transaction here
        if not transaction.sender or not transaction.recipient:
            raise Exception("Transaction must include sender and recipient")
        if not transaction.signature:
            raise Exception("Transaction must be signed")
        # For simplicity, skip balance check

        self.pending_transactions.append(transaction)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i-1]

            if current.hash != current.calculate_hash():
                print("Current block hash invalid")
                return False
            if current.previous_hash != previous.hash:
                print("Previous block hash invalid")
                return False
            for tx in current.transactions:
                if tx.sender == "MINING_REWARD":
                    continue
                # Here you should verify signature with sender's public key (omitted for simplicity)
        return True


# --- Example usage ---

# Create wallets
alice = Wallet()
bob = Wallet()

print(f"Alice's address: {alice.get_address()}")
print(f"Bob's address: {bob.get_address()}")

# Create blockchain
my_coin = Blockchain()

# Create a transaction from Alice to Bob
tx1 = Transaction(alice.get_address(), bob.get_address(), 50)
tx1.sign_transaction(alice.private_key)
my_coin.add_transaction(tx1)

# Mine pending transactions (reward goes to Alice)
print("Mining pending transactions...")
my_coin.mine_pending_transactions(alice.get_address())

print(f"Is blockchain valid? {my_coin.is_chain_valid()}")

# Print the blockchain data
for block in my_coin.chain:
    print(f"\nBlock {block.index}:")
    for tx in block.transactions:
        print(f"  From: {tx.sender}")
        print(f"  To: {tx.recipient}")
        print(f"  Amount: {tx.amount}")
        print(f"  Signature: {tx.signature}")

